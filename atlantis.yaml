version: 3
projects:
- name: 2
  dir: terraform/stacks/stackkit-test-dev-ap-northeast-2
  terraform_version: v1.7.5
  autoplan:
    when_modified: ["**/*.tf", "**/*.tfvars"]
    enabled: false
  apply_requirements: ["approved", "mergeable"]
  delete_source_branch_on_merge: false
  workflow: slack-notification

workflows:
  slack-notification:
    plan:
      steps:
      - init
      - plan:
          extra_args: ["-lock-timeout=10m"]
      - run: |
          set -e

          # Extract repo and PR info from environment
          REPO_ORG=$(echo "$BASE_REPO_OWNER" | tr '[:upper:]' '[:lower:]')
          REPO_NAME=$(echo "$BASE_REPO_NAME" | tr '[:upper:]' '[:lower:]')
          PR_NUM=$PULL_NUM
          COMMIT_SHA=$(echo "$HEAD_COMMIT" | cut -c1-8)
          TIMESTAMP=$(date -u +%Y%m%d%H%M%S)
          PR_URL="https://github.com/${BASE_REPO_OWNER}/${BASE_REPO_NAME}/pull/${PR_NUM}"

          # Check if plan was successful
          if [ -f "$PLANFILE" ]; then
            PLAN_STATUS="succeeded"
            PLAN_COLOR="good"
            echo "‚úÖ Plan succeeded - sending Slack notification"
          else
            PLAN_STATUS="failed"
            PLAN_COLOR="danger"
            echo "‚ùå Plan failed - sending Slack notification"
          fi

          # Send Slack notification with AI-REVIEW trigger and JSON metadata
          SLACK_MESSAGE="{
            \"text\": \"[AI-REVIEW] üèóÔ∏è Terraform Plan $PLAN_STATUS\",
            \"attachments\": [
              {
                \"color\": \"$PLAN_COLOR\",
                \"title\": \"üèóÔ∏è Terraform Plan $PLAN_STATUS\",
                \"title_link\": \"$PR_URL\",
                \"fields\": [
                  {
                    \"title\": \"Repository\",
                    \"value\": \"$REPO_ORG/$REPO_NAME\",
                    \"short\": true
                  },
                  {
                    \"title\": \"PR Number\",
                    \"value\": \"$PR_NUM\",
                    \"short\": true
                  },
                  {
                    \"title\": \"Commit\",
                    \"value\": \"$COMMIT_SHA\",
                    \"short\": true
                  },
                  {
                    \"title\": \"Timestamp\",
                    \"value\": \"$TIMESTAMP\",
                    \"short\": true
                  },
                  {
                    \"title\": \"Metadata\",
                    \"value\": \"\`\`\`json\n{\\"action\\":\\"plan\\",\\"status\\":\\"$PLAN_STATUS\\",\\"repository\\":\\"$REPO_ORG/$REPO_NAME\\",\\"pr\\":$PR_NUM,\\"commit\\":\\"$COMMIT_SHA\\",\\"timestamp\\":\\"$TIMESTAMP\\"}\n\`\`\`\",
                    \"short\": false
                  }
                ]
              }
            ]
          }"

          # Debug: Check if SLACK_WEBHOOK_URL is set
          if [ -z "$SLACK_WEBHOOK_URL" ]; then
            echo "‚ùå SLACK_WEBHOOK_URL environment variable is not set"
            exit 1
          fi
          
          echo "üîç Sending Slack notification..."
          echo "üìù Slack message: $SLACK_MESSAGE"
          echo "üîó Webhook URL: ${SLACK_WEBHOOK_URL:0:50}..."
          
          # Send Slack notification and capture response
          CURL_RESPONSE=$(curl -X POST -H 'Content-type: application/json' \
            --data "$SLACK_MESSAGE" \
            --write-out "HTTPSTATUS:%{http_code}" \
            --silent \
            "$SLACK_WEBHOOK_URL")
          
          # Extract HTTP status code
          HTTP_STATUS=$(echo $CURL_RESPONSE | tr -d '\n' | sed -E 's/.*HTTPSTATUS:([0-9]{3})$/\1/')
          RESPONSE_BODY=$(echo $CURL_RESPONSE | sed -E 's/HTTPSTATUS:[0-9]{3}$//')
          
          echo "üìä HTTP Status: $HTTP_STATUS"
          echo "üìÑ Response: $RESPONSE_BODY"
          
          if [ "$HTTP_STATUS" -eq 200 ]; then
            echo "‚úÖ Plan result sent to Slack successfully"
            echo "ü§ñ AI will analyze and comment on this PR shortly..."
          else
            echo "‚ùå Failed to send Slack notification (HTTP $HTTP_STATUS)"
            echo "Response: $RESPONSE_BODY"
          fi
    apply:
      steps:
      - apply:
          extra_args: ["-lock-timeout=10m", "-input=false", "$PLANFILE"]
      - run: |
          set -e

          # Extract repo and PR info from environment
          REPO_ORG=$(echo "$BASE_REPO_OWNER" | tr '[:upper:]' '[:lower:]')
          REPO_NAME=$(echo "$BASE_REPO_NAME" | tr '[:upper:]' '[:lower:]')
          PR_NUM=$PULL_NUM
          COMMIT_SHA=$(echo "$HEAD_COMMIT" | cut -c1-8)
          TIMESTAMP=$(date -u +%Y%m%d%H%M%S)
          PR_URL="https://github.com/${BASE_REPO_OWNER}/${BASE_REPO_NAME}/pull/${PR_NUM}"

          # Check apply result by looking at exit code of previous step
          APPLY_EXIT_CODE=${PIPESTATUS[0]:-0}

          if [ $APPLY_EXIT_CODE -eq 0 ]; then
            APPLY_STATUS="succeeded"
            APPLY_COLOR="good"
            echo "‚úÖ Apply succeeded - sending Slack notification"
          else
            APPLY_STATUS="failed"
            APPLY_COLOR="danger"
            echo "‚ùå Apply failed - sending Slack notification"
          fi

          # Send Slack notification with AI-REVIEW trigger and JSON metadata
          SLACK_MESSAGE="{
            \"text\": \"[AI-REVIEW] üöÄ Terraform Apply $APPLY_STATUS\",
            \"attachments\": [
              {
                \"color\": \"$APPLY_COLOR\",
                \"title\": \"üöÄ Terraform Apply $APPLY_STATUS\",
                \"title_link\": \"$PR_URL\",
                \"fields\": [
                  {
                    \"title\": \"Repository\",
                    \"value\": \"$REPO_ORG/$REPO_NAME\",
                    \"short\": true
                  },
                  {
                    \"title\": \"PR Number\",
                    \"value\": \"$PR_NUM\",
                    \"short\": true
                  },
                  {
                    \"title\": \"Commit\",
                    \"value\": \"$COMMIT_SHA\",
                    \"short\": true
                  },
                  {
                    \"title\": \"Timestamp\",
                    \"value\": \"$TIMESTAMP\",
                    \"short\": true
                  },
                  {
                    \"title\": \"Exit Code\",
                    \"value\": \"$APPLY_EXIT_CODE\",
                    \"short\": true
                  },
                  {
                    \"title\": \"Metadata\",
                    \"value\": \"\`\`\`json\n{\\"action\\":\\"apply\\",\\"status\\":\\"$APPLY_STATUS\\",\\"repository\\":\\"$REPO_ORG/$REPO_NAME\\",\\"pr\\":$PR_NUM,\\"commit\\":\\"$COMMIT_SHA\\",\\"timestamp\\":\\"$TIMESTAMP\\",\\"exit_code\\":$APPLY_EXIT_CODE}\n\`\`\`\",
                    \"short\": false
                  }
                ]
              }
            ]
          }"

          # Debug: Check if SLACK_WEBHOOK_URL is set
          if [ -z "$SLACK_WEBHOOK_URL" ]; then
            echo "‚ùå SLACK_WEBHOOK_URL environment variable is not set"
            exit 1
          fi
          
          echo "üîç Sending Slack notification..."
          echo "üìù Slack message: $SLACK_MESSAGE"
          echo "üîó Webhook URL: ${SLACK_WEBHOOK_URL:0:50}..."
          
          # Send Slack notification and capture response
          CURL_RESPONSE=$(curl -X POST -H 'Content-type: application/json' \
            --data "$SLACK_MESSAGE" \
            --write-out "HTTPSTATUS:%{http_code}" \
            --silent \
            "$SLACK_WEBHOOK_URL")
          
          # Extract HTTP status code
          HTTP_STATUS=$(echo $CURL_RESPONSE | tr -d '\n' | sed -E 's/.*HTTPSTATUS:([0-9]{3})$/\1/')
          RESPONSE_BODY=$(echo $CURL_RESPONSE | sed -E 's/HTTPSTATUS:[0-9]{3}$//')
          
          echo "üìä HTTP Status: $HTTP_STATUS"
          echo "üìÑ Response: $RESPONSE_BODY"
          
          if [ "$HTTP_STATUS" -eq 200 ]; then
            echo "‚úÖ Apply result sent to Slack successfully"
            echo "ü§ñ AI has been notified of the apply result"
          else
            echo "‚ùå Failed to send Slack notification (HTTP $HTTP_STATUS)"
            echo "Response: $RESPONSE_BODY"
          fi

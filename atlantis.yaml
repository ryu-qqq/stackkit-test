version: 3
projects:
- name: stackkit-test-stackkit-test-dev-ap-northeast-2
  dir: terraform/stacks/stackkit-test-dev-ap-northeast-2
  terraform_version: v1.7.5
  autoplan:
    when_modified: ["**/*.tf", "**/*.tfvars"]
    enabled: false
  apply_requirements: ["approved", "mergeable"]
  delete_source_branch_on_merge: false
  workflow: slack-notification

workflows:
  slack-notification:
    plan:
      steps:
      - init
      - plan:
          extra_args: ["-lock-timeout=10m", "-out=terraform-plan.tfplan"]
      - run: |
          set -e

          # Extract repo and PR info from environment
          REPO_ORG=$(echo "$BASE_REPO_OWNER" | tr '[:upper:]' '[:lower:]')
          REPO_NAME=$(echo "$BASE_REPO_NAME" | tr '[:upper:]' '[:lower:]')
          PR_NUM=$PULL_NUM
          COMMIT_SHA=$(echo "$HEAD_COMMIT" | cut -c1-8)
          TIMESTAMP=$(date -u +%Y%m%d%H%M%S)
          PR_URL="https://github.com/${BASE_REPO_OWNER}/${BASE_REPO_NAME}/pull/${PR_NUM}"

          # Check if plan was successful
          if [ -f "terraform-plan.tfplan" ]; then
            PLAN_STATUS="succeeded"
            PLAN_COLOR="good"
            echo "‚úÖ Plan succeeded - sending Slack notification"
          else
            PLAN_STATUS="failed"
            PLAN_COLOR="danger"
            echo "‚ùå Plan failed - sending Slack notification"
          fi

          # Send Slack notification with AI-REVIEW trigger and JSON metadata
          SLACK_MESSAGE="{
            \"text\": \"[AI-REVIEW] üèóÔ∏è Terraform Plan $PLAN_STATUS\",
            \"attachments\": [
              {
                \"color\": \"$PLAN_COLOR\",
                \"title\": \"üèóÔ∏è Terraform Plan $PLAN_STATUS\",
                \"title_link\": \"$PR_URL\",
                \"fields\": [
                  {
                    \"title\": \"Repository\",
                    \"value\": \"$REPO_ORG/$REPO_NAME\",
                    \"short\": true
                  },
                  {
                    \"title\": \"PR Number\",
                    \"value\": \"$PR_NUM\",
                    \"short\": true
                  },
                  {
                    \"title\": \"Commit\",
                    \"value\": \"$COMMIT_SHA\",
                    \"short\": true
                  },
                  {
                    \"title\": \"Timestamp\",
                    \"value\": \"$TIMESTAMP\",
                    \"short\": true
                  },
                  {
                    \"title\": \"Metadata\",
                    \"value\": \"\`\`\`json\n{\\"action\\":\\"plan\\",\\"status\\":\\"$PLAN_STATUS\\",\\"repository\\":\\"$REPO_ORG/$REPO_NAME\\",\\"pr\\":$PR_NUM,\\"commit\\":\\"$COMMIT_SHA\\",\\"timestamp\\":\\"$TIMESTAMP\\"}\n\`\`\`\",
                    \"short\": false
                  }
                ]
              }
            ]
          }"

          curl -X POST -H 'Content-type: application/json'             --data "$SLACK_MESSAGE"             "$SLACK_WEBHOOK_URL"

          echo "üì§ Plan result sent to Slack"
          echo "ü§ñ AI will analyze and comment on this PR shortly..."
    apply:
      steps:
      - apply:
          extra_args: ["-lock-timeout=10m", "-input=false", "terraform-plan.tfplan"]
      - run: |
          set -e

          # Extract repo and PR info from environment
          REPO_ORG=$(echo "$BASE_REPO_OWNER" | tr '[:upper:]' '[:lower:]')
          REPO_NAME=$(echo "$BASE_REPO_NAME" | tr '[:upper:]' '[:lower:]')
          PR_NUM=$PULL_NUM
          COMMIT_SHA=$(echo "$HEAD_COMMIT" | cut -c1-8)
          TIMESTAMP=$(date -u +%Y%m%d%H%M%S)
          PR_URL="https://github.com/${BASE_REPO_OWNER}/${BASE_REPO_NAME}/pull/${PR_NUM}"

          # Check apply result by looking at exit code of previous step
          APPLY_EXIT_CODE=${PIPESTATUS[0]:-0}

          if [ $APPLY_EXIT_CODE -eq 0 ]; then
            APPLY_STATUS="succeeded"
            APPLY_COLOR="good"
            echo "‚úÖ Apply succeeded - sending Slack notification"
          else
            APPLY_STATUS="failed"
            APPLY_COLOR="danger"
            echo "‚ùå Apply failed - sending Slack notification"
          fi

          # Send Slack notification with AI-REVIEW trigger and JSON metadata
          SLACK_MESSAGE="{
            \"text\": \"[AI-REVIEW] üöÄ Terraform Apply $APPLY_STATUS\",
            \"attachments\": [
              {
                \"color\": \"$APPLY_COLOR\",
                \"title\": \"üöÄ Terraform Apply $APPLY_STATUS\",
                \"title_link\": \"$PR_URL\",
                \"fields\": [
                  {
                    \"title\": \"Repository\",
                    \"value\": \"$REPO_ORG/$REPO_NAME\",
                    \"short\": true
                  },
                  {
                    \"title\": \"PR Number\",
                    \"value\": \"$PR_NUM\",
                    \"short\": true
                  },
                  {
                    \"title\": \"Commit\",
                    \"value\": \"$COMMIT_SHA\",
                    \"short\": true
                  },
                  {
                    \"title\": \"Timestamp\",
                    \"value\": \"$TIMESTAMP\",
                    \"short\": true
                  },
                  {
                    \"title\": \"Exit Code\",
                    \"value\": \"$APPLY_EXIT_CODE\",
                    \"short\": true
                  },
                  {
                    \"title\": \"Metadata\",
                    \"value\": \"\`\`\`json\n{\\"action\\":\\"apply\\",\\"status\\":\\"$APPLY_STATUS\\",\\"repository\\":\\"$REPO_ORG/$REPO_NAME\\",\\"pr\\":$PR_NUM,\\"commit\\":\\"$COMMIT_SHA\\",\\"timestamp\\":\\"$TIMESTAMP\\",\\"exit_code\\":$APPLY_EXIT_CODE}\n\`\`\`\",
                    \"short\": false
                  }
                ]
              }
            ]
          }"

          curl -X POST -H 'Content-type: application/json'             --data "$SLACK_MESSAGE"             "$SLACK_WEBHOOK_URL"

          echo "üì§ Apply result sent to Slack"
          echo "ü§ñ AI has been notified of the apply result"

name: "Terraform PR - Enhanced Security & Performance"

# Temporarily disabled to test Atlantis
# on:
#   pull_request:
#     branches: [ "main" ]
#     types: [opened, synchronize, reopened, ready_for_review]
#     paths:
#       - 'terraform/**'

# Manual trigger only for testing
on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  pull-requests: write
  security-events: write

env:
  TF_VERSION: "1.7.5"
  TF_STACK_REGION: ${{ vars.TF_STACK_REGION || 'ap-northeast-2' }}
  # Security toggles
  RUN_TFLINT: "true"
  RUN_TFSEC: "true"
  RUN_CHECKOV: "true"
  RUN_INFRACOST: ${{ secrets.INFRACOST_API_KEY != '' && 'true' || 'false' }}
  # Performance settings
  ENABLE_CACHE: "true"
  PARALLEL_JOBS: "3"

jobs:
  security-check:
    name: "üîí Security Validation"
    runs-on: ubuntu-latest
    outputs:
      security_passed: ${{ steps.validation.outputs.passed }}
    steps:
      - name: Validate required secrets
        id: validation
        run: |
          MISSING_SECRETS=()
          
          # Check dev secrets
          if [[ -z "${{ secrets.TF_DEV_ROLE_ARN }}" ]]; then
            MISSING_SECRETS+=("TF_DEV_ROLE_ARN")
          fi
          
          # Check prod secrets  
          if [[ -z "${{ secrets.TF_PROD_ROLE_ARN }}" ]]; then
            MISSING_SECRETS+=("TF_PROD_ROLE_ARN")
          fi
          
          if [[ ${#MISSING_SECRETS[@]} -gt 0 ]]; then
            echo "‚ùå Missing required secrets: ${MISSING_SECRETS[*]}"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "‚úÖ All required secrets are configured"
          echo "passed=true" >> $GITHUB_OUTPUT

  detect:
    name: "üìÅ Detect Changed Stacks"
    runs-on: ubuntu-latest
    needs: security-check
    if: needs.security-check.outputs.security_passed == 'true'
    outputs:
      stack_dirs: ${{ steps.collect.outputs.stack_dirs }}
      has_changes: ${{ steps.collect.outputs.has_changes }}
      matrix_include: ${{ steps.collect.outputs.matrix_include }}
    steps:
      - name: Checkout with optimized depth
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Optimized for PR diffs
          token: ${{ github.token }}

      - name: Collect changed stacks with metadata
        id: collect
        shell: bash
        run: |
          set -euo pipefail
          
          # Get changed files efficiently
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            CHANGED=$(git diff --name-only HEAD~1 HEAD | grep '^terraform/' || true)
          else
            CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^terraform/' || true)
          fi
          
          echo "üîç Changed files: $CHANGED"
          
          # Find all stack directories (must contain backend.hcl)
          mapfile -t ALL_STACKS < <(find terraform/stacks -name backend.hcl -exec dirname {} \; | sort -u)
          echo "üì¶ Found ${#ALL_STACKS[@]} total stacks"
          
          # Filter to changed stacks only
          SELECTED=()
          MATRIX_INCLUDE=()
          
          for stack_dir in "${ALL_STACKS[@]}"; do
            if echo "$CHANGED" | grep -q "^$stack_dir/"; then
              SELECTED+=("$stack_dir")
          
              # Determine environment from path (more robust detection)
              ENV="dev"
              if [[ "$stack_dir" =~ prod ]]; then
                ENV="prod"
              elif [[ "$stack_dir" =~ staging ]]; then
                ENV="staging"
              elif [[ "$stack_dir" =~ test ]]; then
                ENV="test"
              fi
          
              # Create matrix entry with metadata
              MATRIX_INCLUDE+=("{\"stack_dir\":\"$stack_dir\",\"env\":\"$ENV\",\"region\":\"$TF_STACK_REGION\"}")
            fi
          done
          
          if [ ${#SELECTED[@]} -eq 0 ]; then
            echo "‚ÑπÔ∏è No stack changes detected"
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "stack_dirs=[]" >> $GITHUB_OUTPUT
            echo "matrix_include=[]" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Output results
          printf '%s\n' "${SELECTED[@]}" | jq -R . | jq -s . > /tmp/stack_dirs.json
          printf '%s\n' "${MATRIX_INCLUDE[@]}" | jq -s . > /tmp/matrix_include.json
          
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "stack_dirs=$(cat /tmp/stack_dirs.json)" >> $GITHUB_OUTPUT
          echo "matrix_include=$(cat /tmp/matrix_include.json)" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Changed stacks:"
          cat /tmp/stack_dirs.json | jq -r '.[]'

  validate-and-plan:
    name: "üß™ Validate & Plan"
    needs: detect
    if: needs.detect.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        include: ${{ fromJson(needs.detect.outputs.matrix_include) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Terraform providers
        if: env.ENABLE_CACHE == 'true'
        uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
            ${{ matrix.stack_dir }}/.terraform/providers
          key: terraform-${{ runner.os }}-${{ matrix.stack_dir }}-${{ hashFiles(format('{0}/.terraform.lock.hcl', matrix.stack_dir)) }}
          restore-keys: |
            terraform-${{ runner.os }}-${{ matrix.stack_dir }}-
            terraform-${{ runner.os }}-

      - name: Cache security tools
        if: env.ENABLE_CACHE == 'true'
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/bin/tflint
            ~/.local/bin/tfsec
            ~/.local/bin/checkov
          key: security-tools-${{ runner.os }}-v2
          restore-keys: security-tools-${{ runner.os }}-

      - name: Setup Terraform with caching
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Configure Terraform plugin cache
        if: env.ENABLE_CACHE == 'true'
        run: |
          mkdir -p ~/.terraform.d/plugin-cache
          echo 'plugin_cache_dir = "$HOME/.terraform.d/plugin-cache"' > ~/.terraformrc

      - name: Validate stack structure
        shell: bash
        run: |
          STACK_DIR="${{ matrix.stack_dir }}"
          
          # Check required files exist
          if [[ ! -f "$STACK_DIR/backend.hcl" ]]; then
            echo "‚ùå Missing backend.hcl in $STACK_DIR"
            exit 1
          fi
          
          # Check for tfvars files
          TFVARS_FOUND=false
          for tfvars in "$STACK_DIR/terraform.tfvars" "$STACK_DIR/${{ matrix.env }}.tfvars"; do
            if [[ -f "$tfvars" ]]; then
              TFVARS_FOUND=true
              echo "‚úÖ Found tfvars: $tfvars"
              break
            fi
          done
          
          if [[ "$TFVARS_FOUND" == "false" ]]; then
            echo "‚ùå No tfvars file found in $STACK_DIR"
            exit 1
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ matrix.env == 'prod' && secrets.TF_PROD_ROLE_ARN || secrets.TF_DEV_ROLE_ARN }}
          aws-region: ${{ matrix.region }}
          role-session-name: terraform-${{ matrix.env }}-${{ github.run_id }}

      - name: Terraform format check
        working-directory: ${{ matrix.stack_dir }}
        run: |
          if ! terraform fmt -check -recursive .; then
            echo "‚ùå Terraform files are not formatted correctly"
            echo "üí° Run 'terraform fmt -recursive' to fix formatting"
            exit 1
          fi

      - name: Terraform init with retry
        working-directory: ${{ matrix.stack_dir }}
        run: |
          set -euo pipefail
          
          for attempt in 1 2 3; do
            if terraform init -backend-config=backend.hcl -reconfigure; then
              echo "‚úÖ Terraform init successful (attempt $attempt)"
              break
            else
              echo "‚ö†Ô∏è Terraform init failed (attempt $attempt)"
              if [[ $attempt -eq 3 ]]; then
                echo "‚ùå Terraform init failed after 3 attempts"
                exit 1
              fi
              sleep 10
            fi
          done

      - name: Select tfvars file
        id: tfvars
        working-directory: ${{ matrix.stack_dir }}
        shell: bash
        run: |
          ENV_TFVARS="${{ matrix.env }}.tfvars"
          DEFAULT_TFVARS="terraform.tfvars"
          
          if [[ -f "$ENV_TFVARS" ]]; then
            TFVARS_FILE="$ENV_TFVARS"
          elif [[ -f "$DEFAULT_TFVARS" ]]; then
            TFVARS_FILE="$DEFAULT_TFVARS"
          else
            echo "‚ùå No tfvars file found"
            exit 1
          fi
          
          echo "TFVARS_FILE=$TFVARS_FILE" >> $GITHUB_OUTPUT
          echo "‚úÖ Using tfvars: $TFVARS_FILE"

      - name: Terraform validate
        working-directory: ${{ matrix.stack_dir }}
        run: terraform validate

      - name: Run policy guard
        env:
          ROOT: terraform
        run: |
          if [[ -x terraform/tools/tf_forbidden.sh ]]; then
            bash terraform/tools/tf_forbidden.sh
          else
            echo "‚ö†Ô∏è Policy guard script not found or not executable"
          fi

      - name: Setup and run tflint
        if: env.RUN_TFLINT == 'true'
        run: |
          if [[ ! -x ~/.local/bin/tflint ]]; then
            curl -sSL https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
          fi
          
          cd ${{ matrix.stack_dir }}
          tflint --init
          tflint .

      - name: Run tfsec security scan
        if: env.RUN_TFSEC == 'true'
        uses: aquasecurity/tfsec-action@v1.0.7
        with:
          working_directory: ${{ matrix.stack_dir }}
          format: sarif
          soft_fail: true

      - name: Run Checkov security scan
        if: env.RUN_CHECKOV == 'true'
        run: |
          if [[ ! -x ~/.local/bin/checkov ]]; then
            pip3 install checkov
          fi
          
          checkov -d ${{ matrix.stack_dir }} \
            --framework terraform \
            --output cli \
            --soft-fail

      - name: Terraform plan with detailed output
        id: plan
        working-directory: ${{ matrix.stack_dir }}
        run: |
          set -euo pipefail
          
          echo "üîç Running Terraform plan..."
          
          if terraform plan -var-file=${{ steps.tfvars.outputs.TFVARS_FILE }} -out=plan.tfplan -detailed-exitcode; then
            PLAN_EXIT_CODE=$?
          else
            PLAN_EXIT_CODE=$?
          fi
          
          # Extract plan summary
          terraform show -no-color plan.tfplan > plan-output.txt
          
          # Set outputs based on exit code
          case $PLAN_EXIT_CODE in
            0)
              echo "plan_result=no-changes" >> $GITHUB_OUTPUT
              echo "‚úÖ No changes detected"
              ;;
            1)
              echo "plan_result=error" >> $GITHUB_OUTPUT
              echo "‚ùå Plan failed"
              exit 1
              ;;
            2) 
              echo "plan_result=changes" >> $GITHUB_OUTPUT
              echo "üìù Changes detected"
              ;;
          esac

      - name: Upload plan artifact
        if: steps.plan.outputs.plan_result != 'no-changes'
        uses: actions/upload-artifact@v4
        with:
          name: plan-${{ matrix.env }}-${{ github.sha }}-${{ hashFiles(format('{0}/**', matrix.stack_dir)) }}
          path: |
            ${{ matrix.stack_dir }}/plan.tfplan
            ${{ matrix.stack_dir }}/plan-output.txt
          retention-days: 7

      - name: Run Infracost
        if: env.RUN_INFRACOST == 'true'
        uses: infracost/actions/comment@v1
        with:
          path: ${{ matrix.stack_dir }}
          api-key: ${{ secrets.INFRACOST_API_KEY }}
          behavior: update
          show-skipped: false

      - name: Comment PR with plan results
        uses: marocchino/sticky-pull-request-comment@v2
        if: always()
        with:
          header: plan-${{ matrix.stack_dir }}
          recreate: true
          message: |
            ## üèóÔ∏è Terraform Plan - `${{ matrix.stack_dir }}`
            
            | **Attribute** | **Value** |
            |---------------|-----------|
            | üåç Environment | `${{ matrix.env }}` |
            | üìã Variables | `${{ steps.tfvars.outputs.TFVARS_FILE }}` |
            | üåê Region | `${{ matrix.region }}` |
            | üìä Plan Result | `${{ steps.plan.outputs.plan_result }}` |
            | ‚úÖ Security Scans | tflint: ${{ env.RUN_TFLINT }}, tfsec: ${{ env.RUN_TFSEC }}, checkov: ${{ env.RUN_CHECKOV }} |
            
            ${{ steps.plan.outputs.plan_result == 'changes' && 'üìÑ **Plan artifact uploaded for review**' || '‚úÖ **No infrastructure changes**' }}
            
            ---
            <details>
            <summary>üîß Workflow Details</summary>
            
            - **Terraform Version**: `${{ env.TF_VERSION }}`
            - **Workflow**: `${{ github.workflow }}`  
            - **Run ID**: `${{ github.run_id }}`
            - **Commit**: `${{ github.sha }}`
            </details>

  no-changes:
    name: "‚ÑπÔ∏è No Changes Detected"
    needs: detect
    if: needs.detect.outputs.has_changes != 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Report no changes
        run: |
          echo "‚ÑπÔ∏è No Terraform changes detected in this PR"
          echo "üöÄ Workflows will run on the next push to main"